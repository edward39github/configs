// Magic: bef12301
// Automatically generated PSI dialog (PSI version 16.5.496)
// Sat Sep  1 15:36:57 2018


f_tmp = FLOAT_FIELD;	// dialog.top.ui
xOrd.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

xOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    PARM_LABEL_SIMPLE("Transform Order", "xOrd") WIDTH(1.5);
    { WIDTH(0.09) }

    xOrd.menu;

    {  }

}

rOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    rOrd.menu;

    {  }

}
}	// Template join.bot


t.gad = ROW
{
   HSTRETCH

   t.label = PARM_LABEL("Translate", "t") WIDTH(1.5);
   PARM(float, 3, "t", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(t.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_transform" VALUE(t.script_action)
	HELP("Select an object to match the translation with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

r.gad = ROW
{
   HSTRETCH

   r.label = PARM_LABEL("Rotate", "r") WIDTH(1.5);
   PARM(float, 3, "r", none, none, "X,Y,Z")
	RANGE(0,360)  LABELREF(r.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_rotation" VALUE(r.script_action)
	HELP("Select an object to match the rotation with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

s.gad = ROW
{
   HSTRETCH

   s.label = PARM_LABEL("Scale", "s") WIDTH(1.5);
   PARM(float, 3, "s", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(s.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_scale" VALUE(s.script_action)
	HELP("Select an object to match the scale with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

p.gad = ROW
{
   HSTRETCH

   p.label = PARM_LABEL("Pivot Translate", "p") WIDTH(1.5);
   PARM(float, 3, "p", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(p.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_pivot" VALUE(p.script_action)
	HELP("Select an object to match the pivot with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

pr.gad = ROW
{
   HSTRETCH

   pr.label = PARM_LABEL("Pivot Rotate", "pr") WIDTH(1.5);
   PARM(float, 3, "pr", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(pr.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_pivot_rotation" VALUE(pr.script_action)
	HELP("Select an object to match the pivot rotation with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

scale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 scale.label = PARM_LABEL("Uniform Scale", "scale") WIDTH(1.5);
 PARM(float, 1, "scale", none, none) RANGE(0,1)
	 LABELREF(scale.label) HSTRETCH;

}

pre_xform.gad = ROW
{

    { WIDTH(1.5) }
    { WIDTH(0.1) }

    pre_xform.menu;
}

keeppos.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("keeppos", "Keep Position When Parenting") toggle VALUE(keeppos.val);

    { HSTRETCH }

}

childcomp.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("childcomp", "Child Compensation") toggle VALUE(childcomp.val);

    { HSTRETCH }

}

constraints_on.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("constraints_on", "Enable Constraints") toggle VALUE(constraints_on.val);

    { HSTRETCH }

}

constraints_path.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 constraints_path.label = PARM_LABEL("Constraints", "constraints_path") WIDTH(1.5);
 PARM_FIELD(pathstring, "constraints_path") VALUE(constraints_path.val) 
	LABELREF(constraints_path.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(constraints_path.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(constraints_path.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

    ACTION_ICONBUTTON "BUTTONS_add_constraints" VALUE(constraints_path.script_action)
	HELP("")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}
lookatpath.gad = NULL { }
lookupobjpath.gad = NULL { }
lookup.gad = NULL { }
pathobjpath.gad = NULL { }
roll.gad = NULL { }
pos.gad = NULL { }
uparmtype.gad = NULL { }
pathorient.gad = NULL { }
up.gad = NULL { }
bank.gad = NULL { }

label1.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    label1.label = PARM_LABEL("Input #1 Label", "label1") WIDTH(1.5);
    PARM_FIELD(string, "label1") VALUE(label1.val) 
	LABELREF(label1.label) HSTRETCH;

}

label2.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    label2.label = PARM_LABEL("Input #2 Label", "label2") WIDTH(1.5);
    PARM_FIELD(string, "label2") VALUE(label2.val) 
	LABELREF(label2.label) HSTRETCH;

}

label3.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    label3.label = PARM_LABEL("Input #3 Label", "label3") WIDTH(1.5);
    PARM_FIELD(string, "label3") VALUE(label3.val) 
	LABELREF(label3.label) HSTRETCH;

}

label4.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    label4.label = PARM_LABEL("Input #4 Label", "label4") WIDTH(1.5);
    PARM_FIELD(string, "label4") VALUE(label4.val) 
	LABELREF(label4.label) HSTRETCH;

}
tdisplay.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
tdisplay.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

tdisplay.gad = PARM_BUTTON("tdisplay", "") toggle VALUE(tdisplay.val);

display.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 display.label = PARM_LABEL("Display", "display") WIDTH(1.32);
 PARM(integer, 1, "display", none, none) RANGE(0,1)
	LOCK_RANGE LABELREF(display.label) HSTRETCH;

}
}	
}	// Template join.bot


outputobj.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Output Transform", "outputobj") WIDTH(1.5);
    { WIDTH(0.09) }

    outputobj.menu;

    { HSTRETCH }

}

visibleobjects.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 visibleobjects.label = PARM_LABEL("Visible Children", "visibleobjects") WIDTH(1.5);
 PARM_FIELD (pathstring, "visibleobjects") LABELREF(visibleobjects.label) 
	VALUE(visibleobjects.val) HSTRETCH;

    visibleobjects.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(visibleobjects.plus) LOOKFLAT
    HELP("Open floating bundle chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

picking.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("picking", "Viewport Selecting Enabled") toggle VALUE(picking.val);

    { HSTRETCH }

}

pickscript.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 pickscript.label = PARM_LABEL("Select Script", "pickscript") WIDTH(1.5);

 PARM_FIELD (pathstring, "pickscript") LABELREF(pickscript.label)
	VALUE(pickscript.val) HSTRETCH;

    pickscript.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(pickscript.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

caching.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("caching", "Cache Object Transform") toggle VALUE(caching.val);

    { HSTRETCH }

}
use_dcolor.gad = NULL { }
dcolor.gad = NULL { }

uvmake.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("uvmake", "Make UV") toggle VALUE(uvmake.val);

    { HSTRETCH }

}

cuspangle.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 cuspangle.label = PARM_LABEL("Smooth Angle", "cuspangle") WIDTH(1.5);
 PARM(float, 1, "cuspangle", none, none) RANGE(0,180)
	LOCK_RANGE LABELREF(cuspangle.label) HSTRETCH;

}

res_texture.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("UV Texture Size", "res_texture") WIDTH(1.5);
    { WIDTH(0.09) }

    res_texture.menu;

    { HSTRETCH }

}

res_light.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("UV Light Size", "res_light") WIDTH(1.5);
    { WIDTH(0.09) }

    res_light.menu;

    { HSTRETCH }

}

triangulate.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("triangulate", "Triangulate") toggle VALUE(triangulate.val);

    { HSTRETCH }

}

orient.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("orient", "Change Orientation") toggle VALUE(orient.val);

    { HSTRETCH }

}

uscale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 uscale.label = PARM_LABEL("Uniform Scale", "uscale") WIDTH(1.5);
 PARM(float, 1, "uscale", none, none) RANGE(0,3)
	LOCK_RANGE_MIN LABELREF(uscale.label) HSTRETCH;

}

length.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 length.label = PARM_LABEL("Length", "length") WIDTH(1.5);
 PARM(float, 1, "length", none, none) RANGE(1,5)
	LOCK_RANGE_MIN LABELREF(length.label) HSTRETCH;

}

height.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 height.label = PARM_LABEL("Height", "height") WIDTH(1.5);
 PARM(float, 1, "height", none, none) RANGE(0.5,2.5)
	LOCK_RANGE_MIN LABELREF(height.label) HSTRETCH;

}

width.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 width.label = PARM_LABEL("Width", "width") WIDTH(1.5);
 PARM(float, 1, "width", none, none) RANGE(0.10000000000000001,0.29999999999999999)
	LOCK_RANGE_MIN LABELREF(width.label) HSTRETCH;

}

columnlen.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 columnlen.label = PARM_LABEL("Column Length", "columnlen") WIDTH(1.5);
 PARM(float, 1, "columnlen", none, none) RANGE(0.050000000000000003,0.29999999999999999)
	LOCK_RANGE LABELREF(columnlen.label) HSTRETCH;

}

bevelsize.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 bevelsize.label = PARM_LABEL("Bevel Size", "bevelsize") WIDTH(1.5);
 PARM(float, 1, "bevelsize", none, none) RANGE(0,0.01)
	LOCK_RANGE_MIN LABELREF(bevelsize.label) HSTRETCH;

}

count.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 count.label = PARM_LABEL("Count", "count") WIDTH(1.5);
 PARM(integer, 1, "count", none, none) RANGE(1,30)
	LOCK_RANGE_MIN LABELREF(count.label) HSTRETCH;

}

blockwidth.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 blockwidth.label = PARM_LABEL("Width", "blockwidth") WIDTH(1.5);
 PARM(float, 1, "blockwidth", none, none) RANGE(0.0050000000000000001,0.29999999999999999)
	LOCK_RANGE_MIN LABELREF(blockwidth.label) HSTRETCH;

}

spacing.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 spacing.label = PARM_LABEL("Spacing", "spacing") WIDTH(1.5);
 PARM(float, 1, "spacing", none, none) RANGE(0,1)
	LOCK_RANGE LABELREF(spacing.label) HSTRETCH;

}

density.si_rampedit = FLOAT_RAMP VALUE(density.ramp_val)
			LAYOUT(horizontal)  HSTRETCH;

density.multiramp = 
{
    LAYOUT(vertical) STRETCH

    ROW
    {
	LOOK(plain) JUSTIFY(left,center) SPACING(0.1) VMARGIN(0.02) HSTRETCH

	COL
	{
	    JUSTIFY(right,center) WIDTH(1.5)
	    LABEL "Point No.";
	}

	density.pointno.gad
	    = INT_SLIDER_FIELD VALUE(density.pointno.val) HSTRETCH;
    }
}

density.buttons.gad = COL
{
    VSTRETCH

    ICON_BUTTON_STRIP
    {
	LAYOUT(horizontal) INITSIZE(20p, 20p) 

	ACTION_ICONBUTTON "BUTTONS_delete"
		HELP("Remove Point") VALUE(density.delpoint.val);
	ACTION_ICONBUTTON "BUTTONS_add"
		HELP("Add Point") VALUE(density.addpoint.val);
    }

    { VSTRETCH }

    ROW
    {
	    density.toggleparms.gad
	      = ACTION_ICONBUTTON "BUTTONS_show_controls"
		HELP("Hide Controls")
		VALUE(density.toggle.val)
		SENDSKEY("h.pane.parms.toggle_ramp_parms")
		LOOKFLAT UI_FLAT_ICON_BTN_SIZE_TINY;

	    density.togglerampsize.gad
	      = ACTION_ICONBUTTON "BUTTONS_restore_mini"
		HELP("Maximize ramp")
		VALUE(density.togglerampsize.val)
		SENDSKEY("h.pane.parms.toggle_ramp_size")
		LOOKFLAT UI_FLAT_ICON_BTN_SIZE_TINY;
    }
}

density.parm =
{
    LAYOUT(vertical) HSTRETCH JUSTIFY(left, center)

    density.ramp.gad = ROW
    {
	MARGIN(0.02) SPACING(0.02) JUSTIFY(left, top) HSTRETCH

	density.buttons.gad VSTRETCH;

	density.si_rampedit HSTRETCH;
    }
}

density.gad =
{
    LAYOUT(vertical) MARGIN(2p) HSTRETCH

    {
	LAYOUT(horizontal) HSTRETCH

	PARM_LABEL_SIMPLE("Density", "density");

	{ HSTRETCH }

    }

    {
	LAYOUT(vertical) MARGIN(2p) SPACING(0.02) LOOK(darkline) HSTRETCH

	density.parm;

	SWITCHER tight
	{
	    LAYOUT(overlap) VALUE(density.hideparms.val) HSTRETCH
	    density.multiramp;
	    {}
	}
    }
}

folder3.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG
    { 
	VALUE(folder3.gad.val) STRETCH(1,0)

	TAB "Blocks"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(2p) SPACING(2p)
	    count.gad;		
	    blockwidth.gad;		
	    spacing.gad;		
	    density.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}
    } 
}

folder0.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG
    { 
	VALUE(folder0.gad.val) STRETCH(1,0)

	TAB "Form"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(2p) SPACING(2p)
	    triangulate.gad;		
	    orient.gad;		
	    uscale.gad;		
	    length.gad;		
	    height.gad;		
	    width.gad;		
	    columnlen.gad;		
	    bevelsize.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}
    } 
}

folder2.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG
    { 
	VALUE(folder2.gad.val) STRETCH(1,0)

	TAB "UV"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(2p) SPACING(2p)
	    uvmake.gad;		
	    cuspangle.gad;		
	    res_texture.gad;		
	    res_light.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}
    } 
}

folder0_1.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG
    { 
	VALUE(folder0_1.gad.val) STRETCH(1,0)

	TAB "Transform"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    xOrd.row.join;		
	    t.gad;		
	    r.gad;		
	    s.gad;		
	    p.gad;		
	    pr.gad;		
	    scale.gad;		
	    pre_xform.gad;		
	    keeppos.gad;		
	    childcomp.gad;		
	    constraints_on.gad;		
	    constraints_path.gad;		
	    lookatpath.gad;		
	    lookupobjpath.gad;		
	    lookup.gad;		
	    pathobjpath.gad;		
	    roll.gad;		
	    pos.gad;		
	    uparmtype.gad;		
	    pathorient.gad;		
	    up.gad;		
	    bank.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Asset Parms"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    folder2.gad;		
	    folder0.gad;		
	    folder3.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}
    } 
}

# warning cpp warning: "GenV3/subdialog.top.ui":5 Macro "PARMSPACING" redefined.  Using later definition
# warning cpp warning: "GenV3/subdialog.top.ui":6 Macro "LAYOUTDIR" redefined.  Using later definition
# warning cpp warning: "GenV3/subdialog.top.ui":7 Macro "LOOK_PLAIN" redefined.  Using later definition
# warning cpp warning: "GenV3/subdialog.top.ui":8 Macro "DO_JUSTIFY" redefined.  Using later definition
dialog_norm.gad = 
{
    LAYOUT(vertical) SPACING(0.02) HSTRETCH LOOK(plain) 
    folder0_1.gad; 
} 
// dialog.bot.ui

extrastuffstowbar_minimize.val := 1;

dialog = OPENNOTIFIER
{
    LAYOUT(vertical) SPACING(0.02) LOOK(bg) VALUE(open.val) HSTRETCH

    { HEIGHT(1p) LOOK(bg) HSTRETCH }

    dialog_norm.gad;
}
