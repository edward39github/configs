// Magic: b0d924e2
// Automatically generated PSI dialog (PSI version 16.5.496)
// Tue Aug 28 22:20:36 2018


f_tmp = FLOAT_FIELD;	// dialog.top.ui

impostor_rop.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 impostor_rop.label = PARM_LABEL("Impostor ROP", "impostor_rop") WIDTH(1.5);
 PARM_FIELD(pathstring, "impostor_rop") VALUE(impostor_rop.val) 
	LABELREF(impostor_rop.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(impostor_rop.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(impostor_rop.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}
xOrd.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

xOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    PARM_LABEL_SIMPLE("Transform Order", "xOrd") WIDTH(1.5);
    { WIDTH(0.09) }

    xOrd.menu;

    {  }

}

rOrd.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    rOrd.menu;

    {  }

}
}	// Template join.bot


t.gad = ROW
{
   HSTRETCH

   t.label = PARM_LABEL("Translate", "t") WIDTH(1.5);
   PARM(float, 3, "t", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(t.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_transform" VALUE(t.script_action)
	HELP("Select an object to match the translation with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

r.gad = ROW
{
   HSTRETCH

   r.label = PARM_LABEL("Rotate", "r") WIDTH(1.5);
   PARM(float, 3, "r", none, none, "X,Y,Z")
	RANGE(0,360)  LABELREF(r.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_rotation" VALUE(r.script_action)
	HELP("Select an object to match the rotation with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

s.gad = ROW
{
   HSTRETCH

   s.label = PARM_LABEL("Scale", "s") WIDTH(1.5);
   PARM(float, 3, "s", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(s.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_scale" VALUE(s.script_action)
	HELP("Select an object to match the scale with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

p.gad = ROW
{
   HSTRETCH

   p.label = PARM_LABEL("Pivot", "p") WIDTH(1.5);
   PARM(float, 3, "p", none, none, "X,Y,Z")
	RANGE(0,1)  LABELREF(p.label)
	HSTRETCH;

    ACTION_ICONBUTTON "BUTTONS_match_pivot" VALUE(p.script_action)
	HELP("Select an object to match the pivot with.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

scale.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 scale.label = PARM_LABEL("Uniform Scale", "scale") WIDTH(1.5);
 PARM(float, 1, "scale", none, none) RANGE(0,1)
	 LABELREF(scale.label) HSTRETCH;

}

pre_xform.gad = ROW
{

    { WIDTH(1.5) }
    { WIDTH(0.1) }

    pre_xform.menu;
}

keeppos.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("keeppos", "Keep Position When Parenting") toggle VALUE(keeppos.val);

    { HSTRETCH }

}

childcomp.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("childcomp", "Child Compensation") toggle VALUE(childcomp.val);

    { HSTRETCH }

}

constraints_on.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("constraints_on", "Enable Constraints") toggle VALUE(constraints_on.val);

    { HSTRETCH }

}

constraints_path.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 constraints_path.label = PARM_LABEL("Constraints", "constraints_path") WIDTH(1.5);
 PARM_FIELD(pathstring, "constraints_path") VALUE(constraints_path.val) 
	LABELREF(constraints_path.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(constraints_path.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(constraints_path.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

    ACTION_ICONBUTTON "BUTTONS_add_constraints" VALUE(constraints_path.script_action)
	HELP("")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}
lookatpath.gad = NULL { }
lookupobjpath.gad = NULL { }
lookup.gad = NULL { }
pathobjpath.gad = NULL { }
roll.gad = NULL { }
pos.gad = NULL { }
uparmtype.gad = NULL { }
pathorient.gad = NULL { }
up.gad = NULL { }
bank.gad = NULL { }

label1.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    label1.label = PARM_LABEL("Input #1 Label", "label1") WIDTH(1.5);
    PARM_FIELD(string, "label1") VALUE(label1.val) 
	LABELREF(label1.label) HSTRETCH;

}

label2.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    label2.label = PARM_LABEL("Input #2 Label", "label2") WIDTH(1.5);
    PARM_FIELD(string, "label2") VALUE(label2.val) 
	LABELREF(label2.label) HSTRETCH;

}

label3.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    label3.label = PARM_LABEL("Input #3 Label", "label3") WIDTH(1.5);
    PARM_FIELD(string, "label3") VALUE(label3.val) 
	LABELREF(label3.label) HSTRETCH;

}

label4.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    label4.label = PARM_LABEL("Input #4 Label", "label4") WIDTH(1.5);
    PARM_FIELD(string, "label4") VALUE(label4.val) 
	LABELREF(label4.label) HSTRETCH;

}
tdisplay.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
tdisplay.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

tdisplay.gad = PARM_BUTTON("tdisplay", "") toggle VALUE(tdisplay.val);

display.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 display.label = PARM_LABEL("Display", "display") WIDTH(1.32);
 PARM(integer, 1, "display", none, none) RANGE(0,1)
	LOCK_RANGE LABELREF(display.label) HSTRETCH;

}
}	
}	// Template join.bot


outputobj.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Output Transform", "outputobj") WIDTH(1.5);
    { WIDTH(0.09) }

    outputobj.menu;

    { HSTRETCH }

}

visibleobjects.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 visibleobjects.label = PARM_LABEL("Visible Children", "visibleobjects") WIDTH(1.5);
 PARM_FIELD (pathstring, "visibleobjects") LABELREF(visibleobjects.label) 
	VALUE(visibleobjects.val) HSTRETCH;

    visibleobjects.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(visibleobjects.plus) LOOKFLAT
    HELP("Open floating bundle chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

picking.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("picking", "Viewport Selecting Enabled") toggle VALUE(picking.val);

    { HSTRETCH }

}

pickscript.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 pickscript.label = PARM_LABEL("Select Script", "pickscript") WIDTH(1.5);

 PARM_FIELD (pathstring, "pickscript") LABELREF(pickscript.label)
	VALUE(pickscript.val) HSTRETCH;

    pickscript.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(pickscript.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

caching.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("caching", "Cache Object Transform") toggle VALUE(caching.val);

    { HSTRETCH }

}
use_dcolor.gad = NULL { }
dcolor.gad = NULL { }
pr.gad = NULL { }

stdswitcher3.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG
    { 
	VALUE(stdswitcher3.gad.val) STRETCH(1,0)
    } 
}

dialog_norm.gad = 
{
    LAYOUT(vertical) SPACING(0.02) HSTRETCH LOOK(plain) 
    impostor_rop.gad; 
    pr.gad; 
} 
// dialog.bot.ui

extrastuffstowbar_minimize.val := 1;

dialog = OPENNOTIFIER
{
    LAYOUT(vertical) SPACING(0.02) LOOK(bg) VALUE(open.val) HSTRETCH

    { HEIGHT(1p) LOOK(bg) HSTRETCH }

    dialog_norm.gad;
}
