{"body": [{"indent": 0, "text": ["Attribute Wrangle"], "type": "title", "level": 0}, {"indent": 0, "type": "summary", "text": ["Runs a VEX snippet to modify attribute values."]}, {"body": [{"indent": 0, "type": "para", "text": ["This is a very powerful, low-level node that lets experts who are\nfamiliar with VEX tweak attributes using code."]}, {"indent": 0, "type": "para", "text": ["This node corresponds to the ", {"text": ["Attribute VOP SOP"], "fullpath": "/nodes/sop/attribvop", "scheme": "Node", "type": "link", "value": "/nodes/sop/attribvop"}, ",\nbut uses a textual VEX snippet instead of a VOP network."]}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["This node requires that you understand the ", {"text": ["vex language"], "fullpath": "/vex/index", "scheme": null, "type": "link", "value": "/vex/"}, ".\n    It is very easy to write incorrect code using this node."]}], "indent": 0, "role": "item", "type": "warning"}], "container": true, "role": "item_group", "type": "warning_group"}, {"indent": 0, "type": "para", "text": ["This node ", {"text": ["runs the snippet on the detail or every point/primitive/vertex"], "type": "em"}, "\n(depending on the ", {"text": ["Class"], "type": "ui"}, " parameter) in the input geometry.\nThe snippet can edit the input geometry by changing attributes.\nIt can access information from other geometry using attributes and VEX functions."]}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "text": ["Press ", {"keys": ["MMB"], "text": null, "type": "keys"}, " on the node to see any error output from the snippet."]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": ["You can use the VEX function ", {"text": ["ch"], "type": "code"}, " to evaluate parameters.\n  The path is relative to this node (", {"text": ["ch(\"parm\")"], "type": "code"}, " will evaluate the parameter ", {"text": ["parm"], "type": "code"}, " on this node). This evaluation will be done at the current time."]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": ["Unlike the ", {"text": ["Attrib Create SOP"], "fullpath": "/nodes/sop/attribcreate", "scheme": "Node", "type": "link", "value": "/nodes/sop/attribcreate"}, ", this does not use local variables.\n  Further, all backtick expressions and ", {"text": ["$F"], "type": "code"}, " variables will be evaluated at frame 1,\n  not the current time.\n  Use ", {"text": ["@Frame"], "type": "code"}, ", ", {"text": ["@Time"], "type": "code"}, ", or ", {"text": ["@TimeInc"], "type": "code"}, " instead."]}], "container": true, "type": "bullet_group"}, {"body": [{"indent": 0, "type": "para", "text": ["The ", {"text": ["VEX snippet"], "type": "ui"}, " parameter lets you enter a snippet of ", {"text": ["VEX code"], "fullpath": "/vex/index", "scheme": null, "type": "link", "value": "/vex/"}, " to run on the input geometry.\nSee ", {"text": ["VEX snippets"], "fullpath": "/vex/snippets", "scheme": null, "type": "link", "value": "/vex/snippets"}, " for information on special syntax in the snippet parameter.\nSee ", {"text": ["the VEX chapter"], "fullpath": "/vex/index", "scheme": null, "type": "link", "value": "/vex/"}, " for information on the VEX language."]}], "indent": 0, "level": 3, "text": ["Syntax"], "container": true, "type": "h", "id": null}], "indent": 0, "level": 2, "text": ["Overview"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["A subset of points in the input geometry to run the program on.\n    Leave this blank to affect all points in the input."]}], "indent": 0, "role": "item", "type": "parameters_item", "text": ["Group"]}, {"body": [{"indent": 4, "type": "para", "text": ["What the group is made of."]}], "indent": 0, "role": "item", "type": "parameters_item", "text": ["Group Type"]}, {"body": [{"indent": 4, "type": "para", "text": ["What class of geometry attributes to modify.\n    No attributes will be bound, except read-only detail attributes, when set to ", {"text": ["Numbers"], "type": "ui"}, "."]}], "indent": 0, "role": "item", "type": "parameters_item", "text": ["Run Over"]}, {"body": [{"indent": 4, "type": "para", "text": ["Iteration count when ", {"text": ["Run Over"], "type": "ui"}, " is set to ", {"text": ["Numbers"], "type": "ui"}, ".\n    ", {"text": ["@elemnum"], "type": "code"}, " will be the iteration number from 0 (inclusive), to this number (exclusive),\n    and ", {"text": ["@numelem"], "type": "code"}, " will be this number.\n    No attributes will be bound when in this mode, except read-only detail attributes."]}], "indent": 0, "text": ["Number Count"], "role": "item", "attrs": {"id": "vex_numcount"}, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "text": ["Maximum number of iterations run at a time in any thread when ", {"text": ["Run Over"], "type": "ui"}, " is set to ", {"text": ["Numbers"], "type": "ui"}, ".\n    If this is greater than or equal to ", {"text": ["Number Count"], "type": "ui"}, ", the VEX code will run single-threaded.\n    If each iteration will take a very large amount of time, set this to 1, but\n    there is quite often a significant advantage to making this value larger, especially if\n    each iteration will take a small amount of time, and if any work can avoid being duplicated\n    by running multiple iterations at a time."]}], "indent": 0, "text": ["Thread Job Size"], "role": "item", "attrs": {"id": "vex_threadjobsize"}, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "text": ["A snippet of VEX code that will manipulate the point attributes.\n    You can use ", {"text": ["@", {"text": ["variable_name"], "type": "var"}], "type": "code"}, " syntax to access geometry attributes."]}], "indent": 0, "text": ["VEXpression"], "role": "item", "attrs": {"id": "snippet"}, "type": "parameters_item"}, {"body": [{"indent": 4, "type": "para", "text": ["Only create attributes if their names match this pattern.\n    The default pattern allows any attribute to be created."]}, {"indent": 4, "type": "para", "text": ["You can restrict the created attributes by replacing the ", {"text": ["*"], "type": "code"}, " with a list of allowed names."]}, {"indent": 4, "type": "para", "text": ["Bound attributes, such as ", {"text": ["vtxnum"], "type": "code"}, ", cannot be created and will be ignored."]}], "indent": 0, "role": "item", "type": "parameters_item", "text": ["Attributes to Create"]}, {"body": [{"indent": 4, "type": "para", "text": ["Automatic binding with the ", {"text": ["@"], "type": "code"}, " syntax can be convenient, but if your\n    system becomes more complex there is the risk that a typo in an ", {"text": ["@"], "type": "code"}, " binding\n    will silently just bind a non-existent attribute."]}, {"indent": 4, "type": "para", "text": ["This option forces all ", {"text": ["@"], "type": "code"}, " bindings to be explicitly declared as\n    prototypes before use."]}], "indent": 0, "role": "item", "type": "parameters_item", "text": ["Enforce Prototypes"]}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Code"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["Automatically bind attributes to parameters by name.\n    If for some reason you need CVEX parameters to have different names\n    than the corresponding attributes,\n    turn this off and use the ", {"text": ["Number of bindings"], "type": "ui"}, " parameter to set up\n    mappings between ", {"text": ["Attribute name"], "type": "ui"}, " and ", {"text": ["VEX parameter"], "type": "ui"}, "."]}, {"indent": 4, "type": "para", "text": ["Integer attributes will bind to integer parameters.\n    Float attributes will bind to float, vector, point, matrix, or matrix4 depending on their tuple size.\n    String attributes will bind to strings."]}], "indent": 0, "role": "item", "type": "parameters_item", "text": ["Autobind by Name"]}, {"body": [{"indent": 4, "type": "para", "text": ["Automatically bind any groups to the integer parameter prefixed with ", {"text": ["group_"], "type": "code"}, ". If for some reason you need CVEX parameters to have different names than the corresponding groups, turn this off and use the ", {"text": ["Group Bindings"], "type": "ui"}, " parameter to set up mappings between ", {"text": ["Group Name"], "type": "ui"}, " and ", {"text": ["VEX Parameter"], "type": "ui"}, "."]}], "indent": 0, "role": "item", "type": "parameters_item", "text": ["Autobind Groups by Name"]}, {"body": [{"indent": 8, "type": "para", "text": ["Manually specifies the bindings of each group. "]}], "indent": 0, "role": "item", "type": "parameters_item", "text": ["Group Bindings"]}, {"body": [{"indent": 4, "type": "para", "text": ["VEX functions like ", {"text": ["ch()"], "type": "code"}, " usually evaluate with respect to this node.\n    Enter a node path here to override where the path search starts from.\n    This is useful for embedding in a digital asset, where you want searches\n    to start from the asset root."]}], "indent": 0, "role": "item", "type": "parameters_item", "text": ["Evaluation Node Path"]}, {"body": [{"indent": 4, "type": "para", "text": ["When a VEX parameter is exported, the bound attribute will be\n    created if it doesn\u2019t exist.  This pattern can be used to override\n    the export option on the VEX shader to avoid writing to or creating\n    certain attributes.  The pattern matches the VEX parameter, not\n    the bound attribute. The attribute will still be bound for reading."]}], "indent": 0, "role": "item", "type": "parameters_item", "text": ["Export Parameters"]}, {"body": [{"indent": 4, "type": "para", "text": ["If points are being run over, and the ", {"text": ["P"], "type": "code"}, " attribute is written to,\n    but the ", {"text": ["N"], "type": "code"}, " attribute is not written to, any incoming normals will\n    become out of date.  When this option is set, vertex and point\n    normals will be updated when this occurs."]}], "indent": 0, "role": "item", "type": "parameters_item", "text": ["Update Normals If Displaced"]}, {"body": [{"indent": 4, "type": "para", "text": ["Which attribute to use for matching.  This attribute must be\n    present on both inputs for matching to be done.  Otherwise matching\n    is done by element number (ie, point number when running over points).\n    The attribute should either be an integer or string attribute.\n    This controls how the ", {"text": ["opinput#_"], "type": "code"}, " virtual bindings connect.\n    You can use ", {"text": ["v@opinput1_Cd"], "type": "code"}, ", for example, to read the second input\u2019s\n    ", {"text": ["v@Cd"], "type": "code"}, " attribute."]}], "indent": 0, "role": "item", "type": "parameters_item", "text": ["Attribute To Match"]}, {"body": [{"indent": 4, "type": "para", "text": ["When compiled the Attribute VOP is able to work on the incoming\n    geometry in place without making a copy of it.  This can speed\n    up processing as one less copy is made, but requires that the\n    VEX code doesn\u2019t bind for writing any attributes that are\n    read from the first input."]}], "indent": 0, "role": "item", "type": "parameters_item", "text": ["Compute Results In Place"]}, {"body": [{"indent": 4, "type": "para", "text": ["The name of a group to use as the output selection.  When the highlight flag is enabled for this node, this group will be the output selection used by later modeling tools (if it exists)."]}], "indent": 0, "role": "item", "type": "parameters_item", "text": ["Output Selection Group"]}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 2, "text": ["Bindings"], "container": true, "type": "h", "id": null}], "indent": 0, "level": 1, "text": "Parameters", "role": "section", "container": true, "type": "parameters_section", "id": "parameters"}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "text": [{"text": "", "fullpath": "/nodes/sop/attribexpression", "scheme": "Node", "type": "link", "value": "/nodes/sop/attribexpression"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": [{"text": "", "fullpath": "/nodes/sop/attribvop", "scheme": "Node", "type": "link", "value": "/nodes/sop/attribvop"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": [{"text": "", "fullpath": "/nodes/sop/vexdeform", "scheme": "Node", "type": "link", "value": "/nodes/sop/vexdeform"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": [{"text": "", "fullpath": "/nodes/sop/volumewrangle", "scheme": "Node", "type": "link", "value": "/nodes/sop/volumewrangle"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "container": true, "type": "related_section", "id": "related"}], "title": ["Attribute Wrangle"], "summary": ["Runs a VEX snippet to modify attribute values."], "attrs": {"version": null, "tags": "attrs, vex, tech", "namespace": null, "internal": "attribwrangle", "context": "sop", "type": "node", "icon": "SOP/attribwrangle"}, "included": ["/nodes/sop/pointwrangle", "/nodes/sop/wrangle_syntax"], "type": "root"}