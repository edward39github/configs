{"body": [{"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["The left menu chooses the order in which transforms are applied\n    (for example, scale, then rotate, then translate). This can change the\n    position and orientation of the object, in the same way that going a\n    block and turning east takes you to a different place than turning east\n    and then going a block."]}, {"indent": 4, "type": "para", "text": ["The right menu chooses the order in which to rotate around the\n    X, Y, and Z axes. Certain orders can make character joint\n    transforms easier to use, depending on the character."]}], "indent": 0, "type": "dt", "attrs": {"id": "xord"}, "text": ["Transform Order"]}, {"body": [{"indent": 4, "type": "para", "text": ["Translation along XYZ axes."]}], "indent": 0, "type": "dt", "attrs": {"id": "t"}, "text": ["Translate"]}, {"body": [{"indent": 4, "type": "para", "text": ["Degrees rotation about XYZ axes."]}], "indent": 0, "type": "dt", "attrs": {"id": "r"}, "text": ["Rotate"]}, {"body": [{"indent": 4, "type": "para", "text": ["Non-uniform scaling about XYZ axes."]}], "indent": 0, "type": "dt", "attrs": {"id": "s"}, "text": ["Scale"]}, {"body": [{"indent": 4, "type": "para", "text": ["Local origin of the object.\n    See also ", {"text": ["setting the pivot point"], "fullpath": "/basics/objects", "scheme": null, "type": "link", "value": "/basics/objects"}, " ."]}], "indent": 0, "type": "dt", "attrs": {"id": "p"}, "text": ["Pivot"]}, {"body": [{"indent": 4, "type": "para", "text": ["Scale the object uniformly along all three axes."]}], "indent": 0, "type": "dt", "attrs": {"id": "scale"}, "text": ["Uniform Scale"]}, {"body": [{"indent": 4, "type": "para", "text": ["This menu contains options for manipulating the\n    ", {"fragment": "#pretransform", "text": ["pre-transform"], "value": "/basics/objects#pretransform", "fullpath": "/basics/objects#pretransform", "scheme": null, "type": "link"}, " values. The pre-transform is an internal\n    transform that is applied prior to the regular transform parameters.\n    This allows you to change the frame of reference for the translate, rotate,\n    scale parameter values below without changing the overall transform."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["This reverts the translate, rotate, scale parameters to their\n        default values while maintaining the same overall transform."]}], "indent": 4, "type": "dt", "text": ["Clean Transform"]}, {"body": [{"indent": 8, "type": "para", "text": ["This sets the translate parameter to (0, 0, 0) while maintaining\n        the same overall transform."]}], "indent": 4, "type": "dt", "text": ["Clean Translates"]}, {"body": [{"indent": 8, "type": "para", "text": ["This sets the rotate parameter to (0, 0, 0) while maintaining the\n        same overall transform."]}], "indent": 4, "type": "dt", "text": ["Clean Rotates"]}, {"body": [{"indent": 8, "type": "para", "text": ["This sets the scale parameter to (1, 1, 1) while maintaining the\n        same overall transform."]}], "indent": 4, "type": "dt", "text": ["Clean Scales"]}, {"body": [{"indent": 8, "type": "para", "text": ["This removes the pre-transform by setting the translate, rotate,\n        and scale parameters in order to maintain the same overall\n        transform. Note that if there were shears in the pre-transform, it can not be completely removed."]}], "indent": 4, "type": "dt", "text": ["Extract Pre-transform"]}, {"body": [{"indent": 8, "type": "para", "text": ["This completely removes the pre-transform without changing any\n        parameters. This will change the overall transform of the object if\n        there are any non-default values in the translate, rotate, and\n        scale parameters."]}], "indent": 4, "type": "dt", "text": ["Reset Pre-transform"]}], "container": true, "type": "dt_group"}], "indent": 0, "type": "dt", "attrs": {"id": "pretransform"}, "text": ["Modify Pre-Transform"]}, {"body": [{"indent": 4, "type": "para", "text": ["When the object is re-parented, maintain its current world position by\n    changing the object\u2019s transform parameters."]}], "indent": 0, "type": "dt", "attrs": {"id": "keeppos"}, "text": ["Keep Position When Parenting"]}, {"body": [{"indent": 4, "type": "para", "text": ["When the object is being transformed, maintain the current world transforms \n    of its children by changing their transform parameters."]}], "indent": 0, "type": "dt", "attrs": {"id": "childcomp"}, "text": ["Child Compensation"]}, {"body": [{"indent": 4, "type": "para", "text": ["Enable ", {"text": ["Constraints Network"], "type": "ui"}, " on the object."]}], "indent": 0, "type": "dt", "attrs": {"id": "constraints_on"}, "text": ["Enable Constraints"]}, {"body": [{"indent": 4, "type": "para", "text": ["Path to a CHOP ", {"text": ["Constraints Network"], "type": "ui"}, ".\n    See also ", {"text": ["creating constraints"], "fullpath": "/character/constraints", "scheme": null, "type": "link", "value": "/character/constraints"}, "."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["You can you use the Constraints drop down button to activate one of the Constraints Shelf Tool. If you do so, the first pick session is filled automatically by nodes selected in the parameter panel."]}], "indent": 4, "role": "item", "type": "tip"}], "container": true, "role": "item_group", "type": "tip_group"}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["Lookat and Follow Path parameters on object nodes are deprecated in favor of ", {"text": ["Look At"], "fullpath": "/shelf/constraintlookat", "scheme": null, "type": "link", "value": "/shelf/constraintlookat"}, " and ", {"text": ["Follow Path"], "fullpath": "/shelf/constraintpath", "scheme": null, "type": "link", "value": "/shelf/constraintpath"}, " constraints.\n        The parameters are only hidden for now and you can set their visibitily if you do edit the node\u2019s parameter interface."]}], "indent": 4, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "type": "dt", "attrs": {"id": "constraints_path"}, "text": ["Constraints"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 2, "text": ["Transform"], "container": true, "type": "h", "id": "transform_tab"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["Use the transform space of this object for procedural shaders\n    (choose \"This object\" or the name of another object to use)."]}], "indent": 0, "type": "dt", "text": ["Shader space"]}, {"body": [{"indent": 4, "type": "para", "text": ["Use the transform space of this object for displacement shaders\n    (choose \"This object\" or the name of another object to use)."]}], "indent": 0, "type": "dt", "text": ["Displace space"]}, {"body": [{"indent": 4, "type": "para", "text": ["Defines the SHOP to apply as a surface shader."]}], "indent": 0, "type": "dt", "text": ["SHOP surface"]}, {"body": [{"indent": 4, "type": "para", "text": ["Defines the SHOP to be used for photon map generation."]}], "indent": 0, "type": "dt", "text": ["SHOP photon"]}, {"body": [{"indent": 4, "type": "para", "text": ["Sets a displacement shader for VEX Mantra or RenderMan."]}], "indent": 0, "type": "dt", "text": ["SHOP displacement"]}, {"body": [{"indent": 4, "type": "para", "text": ["Enables interpolating normals across polygonal surfaces."]}], "indent": 0, "type": "dt", "text": ["Smooth shading"]}, {"body": [{"indent": 4, "type": "para", "text": ["Automatically generate a reflection map when rendering."]}], "indent": 0, "type": "dt", "text": ["Auto-gen reflection map"]}], "container": true, "type": "dt_group"}, {"indent": 0, "type": "para", "text": [""]}], "indent": 0, "level": 2, "text": ["Shading"], "container": true, "type": "h", "id": "shading_tab"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["Assign colors to Cs and Os in RenderMan."]}], "indent": 0, "type": "dt", "text": ["RIB Colors"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 2, "text": ["RIB"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["Reference to a CHOP that defines the sound response of this\n    geometry (see SpatialAudio CHOP help)."]}], "indent": 0, "type": "dt", "text": ["Sound Material"]}], "container": true, "type": "dt_group"}, {"indent": 0, "type": "para", "text": [""]}], "indent": 0, "level": 2, "text": ["Sound"], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "text": ["These parameters let you add a ", {"text": ["visual overlay"], "type": "em"}, " to the viewport when\nlooking through this camera/light. This does not actually gate or\ngobo the camera/light, it only affects the viewer."]}, {"indent": 0, "type": "para", "text": ["For example, you can use the ", {"text": ["Font SOP"], "fullpath": "/nodes/sop/font", "scheme": "Node", "type": "link", "value": "/nodes/sop/font"}, " in an overlay\nto add information to the viewer, for use in\n", {"text": ["flipbooks"], "fullpath": "/anim/flipbook", "scheme": null, "type": "link", "value": "/anim/flipbook"}, "."]}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["To show the gate/overlay, you must turn on the \"Camera mask\"\n    icon on the ", {"text": ["Guides and Markers"], "type": "ui"}, " tab of the display options\n    window."]}], "indent": 0, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["If a viewport\u2019s Camera Mask display option is selected, a\n    transparent mask with the specified aspect ratio (width divided\n    by height) will be displayed in that viewport when looking\n    through this camera."]}], "indent": 0, "type": "dt", "text": ["Mask Aspect"]}, {"body": [{"indent": 4, "type": "para", "text": ["The opacity of the mask\u2019s color; the value lies between 0\n    (completely transparent) and 1 (completely opaque)."]}], "indent": 0, "type": "dt", "text": ["Mask Opacity"]}, {"body": [{"indent": 4, "type": "para", "text": ["The SOP to render on top of the camera view. This can be used to\n    display a slate over top of the view, for example."]}, {"indent": 4, "type": "para", "text": ["The geometry must:"]}, {"body": [{"indent": 4, "blevel": 6, "type": "bullet", "text": ["Lie along the XY plane."]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": ["Lie between 0 and +1 in both directions."]}], "container": true, "type": "bullet_group"}, {"indent": 4, "type": "para", "text": ["Houdini scales the portion of the mask geometry between 0 and +1\n    X and Y to the view to create the overlay."]}], "indent": 0, "type": "dt", "text": ["Mask Overlay SOP"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 2, "text": ["Mask"], "container": true, "type": "h", "id": "mask_tab"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["Path to the Material node."]}], "indent": 0, "type": "dt", "text": ["Material"]}, {"body": [{"indent": 4, "type": "para", "text": ["Whether or not this object is displayed in the viewport and rendered.\n    Turn on the checkbox to have Houdini use this parameter,\n    then set the value to 0 to hide the object in the viewport and not render it,\n    or 1 to show and render the object.\n    If the checkbox is off, Houdini ignores the value."]}], "indent": 0, "type": "dt", "attrs": {"id": "display"}, "text": ["Display"]}], "container": true, "type": "dt_group"}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["When ", {"text": ["true"], "type": "code"}, ", the object will not be rendered by primary rays. Only secondary rays will hit the object."]}, {"indent": 4, "type": "para", "text": ["(See the ", {"fragment": "#vm_rendervisibility", "text": ["Render Visibility"], "value": "/props/mantra#vm_rendervisibility", "fallback_text": "vm_rendervisibility", "fullpath": "/props/mantra#vm_rendervisibility", "scheme": "Mantra", "type": "link"}, " property)."]}], "indent": 0, "text": ["Phantom"], "role": "item", "attrs": {"ifdprop": "object:phantom", "hprop": "vm_phantom"}, "type": "parameters_item", "id": "vm_phantom"}, {"body": [{"type": "para", "indent": 4, "text": ["If this option is turned off, then the instance will not be rendered. The object\u2019s properties can still be queried from within VEX, but no geometry will be rendered. This is roughly equivalent to turning the object into a transform space object."]}, {"type": "para", "indent": 4, "text": ["See ", {"text": ["Render Visibility"], "type": "ui"}, " (", {"text": ["vm_rendervisibility"], "type": "code"}, " property)."]}], "indent": 0, "text": ["Renderable"], "role": "item", "attrs": {"ifdprop": "object:renderable", "hprop": "vm_renderable"}, "type": "parameters_item", "id": "vm_renderable"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["How to display your geometry in the viewport."]}], "indent": 0, "type": "dt", "text": ["Display As"]}], "container": true, "type": "dt_group"}, {"body": [{"body": [{"type": "para", "indent": 4, "text": ["Render polygons as a subdivision surface. The ", {"text": ["creaseweight"], "type": "code"}, " attribute is used to perform linear creasing. This attribute may appear on points, vertices or primitives."]}, {"type": "para", "indent": 4, "text": ["When rendering using OpenSubdiv, in addition to the ", {"text": ["creaseweight"], "type": "code"}, ", ", {"text": ["cornerwieght"], "type": "code"}, " attributes and the ", {"text": ["subdivision_hole"], "type": "code"}, " group, additional attributes are scanned to control the behaviour of refinement.  These override any other settings:"]}, {"body": [{"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["int osd_scheme"], "type": "code"}, ", ", {"text": ["string osd_scheme"], "type": "code"}, ":  Specifies the scheme for OSD subdivision (0 or \"catmull-clark\"; 1 or \"loop\";  2 or \"bilinear\").  Note that for Loop subdivision, the geometry can only contain triangles."]}, {"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["int osd_vtxboundaryinterpolation"], "type": "code"}, ": The Vertex Boundary Interpolation method (see ", {"text": ["vm_osd_vtxinterp"], "type": "code"}, " for further details)"]}, {"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["int osd_fvarlinearinterpolation"], "type": "code"}, ": The Face-Varying Linear Interpolation method (see ", {"text": ["vm_osd_fvarinterp"], "type": "code"}, " for further details)"]}, {"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["int osd_creasingmethod"], "type": "code"}, ": Specify the creasing method, 0 for Catmull-Clark, 1 for Chaikin"]}, {"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["int osd_trianglesubdiv"], "type": "code"}, ": Specifies the triangle weighting algorithm, 0 for Catmull-Clark weights, 1 for \"smooth triangle\" weights."]}], "type": "bullet_group", "container": true}], "indent": 0, "text": ["Polygons as subdivision (Mantra)"], "role": "item", "attrs": {"ifdprop": "object:rendersubd", "hprop": "vm_rendersubd"}, "type": "parameters_item", "id": "vm_rendersubd"}], "container": true, "role": "item_group", "type": "parameters_item_group"}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "text": ["The space or comma separated list of categories to which this object belongs."]}, {"type": "para", "indent": 4, "text": ["Currently not supported for per-primitive material assignment (material SOP)."]}], "indent": 0, "text": ["Categories"], "role": "item", "attrs": {"ifdprop": "object:categories", "hprop": "categories"}, "type": "parameters_item", "id": "categories"}, {"body": [{"type": "para", "indent": 4, "text": ["A list of patterns. Objects matching these patterns will reflect in this object. You can use wildcards (for example, ", {"text": ["key_*"], "type": "code"}, ") and\n    ", {"text": ["bundle references"], "fullpath": "/basics/bundles", "scheme": null, "type": "link", "value": "/basics/bundles"}, "  to specify objects."]}, {"type": "para", "indent": 4, "text": ["You can also use the  ", {"text": ["link editor pane"], "fullpath": "/ref/panes/linker", "scheme": null, "type": "link", "value": "/ref/panes/linker"}, "  to edit the relationships between lights and objects using a graphical\n    interface."]}, {"type": "para", "indent": 4, "text": ["The ", {"text": ["object:reflectmask"], "type": "code"}, " property in Mantra is a computed property containing the results of combining reflection categories and reflection masks."]}], "indent": 0, "text": ["Reflection mask"], "role": "item", "attrs": {"ifdprop": "object:reflectmask", "hprop": "reflectmask"}, "type": "parameters_item", "id": "reflectmask"}, {"body": [{"type": "para", "indent": 4, "text": ["A list of patterns. Objects matching these patterns will be visible in refraction rays. You can use wildcards (for example, ", {"text": ["key_*"], "type": "code"}, ") and ", {"text": ["bundle references"], "fullpath": "/basics/bundles", "scheme": null, "type": "link", "value": "/basics/bundles"}, "  to specify objects."]}, {"type": "para", "indent": 4, "text": ["You can also use the  ", {"text": ["link editor pane"], "fullpath": "/ref/panes/linker", "scheme": null, "type": "link", "value": "/ref/panes/linker"}, "  to edit the relationships between lights and objects using a graphical\n    interface."]}, {"type": "para", "indent": 4, "text": ["The ", {"text": ["object:refractmask"], "type": "code"}, " property in Mantra is a computed property containing the results of combining reflection categories and reflection masks."]}], "indent": 0, "text": ["Refraction mask"], "role": "item", "attrs": {"ifdprop": "object:refractmask", "hprop": "refractmask"}, "type": "parameters_item", "id": "refractmask"}, {"body": [{"type": "para", "indent": 4, "text": ["A list of patterns. Lights matching these patterns will illuminate this object. You can use wildcards (for example, ", {"text": ["key_*"], "type": "code"}, ") and\n    ", {"text": ["bundle references"], "fullpath": "/basics/bundles", "scheme": null, "type": "link", "value": "/basics/bundles"}, "  to specify lights."]}, {"type": "para", "indent": 4, "text": ["You can also use the  ", {"text": ["link editor pane"], "fullpath": "/ref/panes/linker", "scheme": null, "type": "link", "value": "/ref/panes/linker"}, "  to edit the relationships between lights and objects using a graphical\n    interface."]}, {"type": "para", "indent": 4, "text": ["The ", {"text": ["object:lightmask"], "type": "code"}, " property in Mantra is a computed property containing the results of combining light categories and light masks."]}], "indent": 0, "text": ["Light mask"], "role": "item", "attrs": {"ifdprop": "object:lightmask", "hprop": "lightmask"}, "type": "parameters_item", "id": "lightmask"}, {"body": [{"type": "para", "indent": 4, "text": ["Some volume primitives (Geometry Volumes, Image3D) can use a filter during evaluation of volume channels. This specifies the filter.  The default box filter is fast to evaluate and produces sharp renders for most smooth fluid simulations.  If your voxel data contains aliasing (stairstepping along edges), you may need to use a larger filter width or smoother filter to produce acceptable results.  For aliased volume data, ", {"text": ["gauss"], "type": "code"}, " is a good filter with a filter width of 1.5."]}, {"body": [{"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["point"], "type": "code"}]}, {"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["box"], "type": "code"}]}, {"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["gauss"], "type": "code"}]}, {"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["bartlett"], "type": "code"}]}, {"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["blackman"], "type": "code"}]}, {"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["catrom"], "type": "code"}]}, {"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["hanning"], "type": "code"}]}, {"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["mitchell"], "type": "code"}]}], "type": "bullet_group", "container": true}], "indent": 0, "text": ["Volume filter"], "role": "item", "attrs": {"ifdprop": "object:filter", "hprop": "vm_volumefilter"}, "type": "parameters_item", "id": "vm_volumefilter"}, {"body": [{"type": "para", "indent": 4, "text": ["This specifies the filter width for the object:filter property. The filter width is specified in number of voxels. Larger filter widths take longer to render and produce blurrier renders, but may be necessary to combat aliasing in some kinds of voxel data."]}], "indent": 0, "text": ["Volume filter width"], "role": "item", "attrs": {"ifdprop": "object:filterwidth", "hprop": "vm_volumefilterwidth"}, "type": "parameters_item", "id": "vm_volumefilterwidth"}, {"body": [{"type": "para", "indent": 4, "text": ["When enabled, the object\u2019s surface shader will be replaced with a matte\n    shader for primary rays. The default matte shader causes the object to\n    render as fully opaque but with an alpha of 0 - effectively cutting a\n    hole in the image where the object would have appeared. This setting is\n    useful when manually splitting an image into passes, so that the\n    background elements can be rendered separately from a foreground\n    object.  The default matte shader is the \"Matte\" VEX shader, though it\n    is possible to set a different matte shader by adding the\n    ", {"text": ["vm_matteshader"], "type": "code"}, " render property and assigning another shader.\n    Secondary rays will still use the object\u2019s assigned surface shader,\n    allowing it to appear in reflections and indirect lighting even though\n    it will not render directly."]}, {"type": "para", "indent": 4, "text": ["For correct matte shading of volumes:"]}, {"body": [{"type": "ord", "blevel": 6, "indent": 4, "text": ["Add the ", {"text": ["vm_matteshader"], "type": "code"}, " property to the object."]}, {"type": "ord", "blevel": 6, "indent": 4, "text": ["Create a ", {"text": ["Volume Matte"], "type": "ui"}, " shader."]}, {"type": "ord", "blevel": 6, "indent": 4, "text": ["Set the density on this shader to match the density on the geometry shader."]}, {"type": "ord", "blevel": 6, "indent": 4, "text": ["Assign this shader to ", {"text": ["vm_matteshader"], "type": "code"}, "."]}], "type": "ord_group", "container": true}, {"type": "para", "indent": 4, "text": ["Then when the ", {"text": ["Matte Shading"], "type": "ui"}, " toggle is enabled, it will use your custom volume matte shader rather than the default (which just sets the density to 1). If you want fully opaque matte, you can use the matte shader rather than volume matte. "]}], "indent": 0, "text": ["Matte shading"], "role": "item", "attrs": {"ifdprop": "object:matte", "hprop": "vm_matte"}, "type": "parameters_item", "id": "vm_matte"}, {"body": [{"type": "para", "indent": 4, "text": ["Shade every sample rather than shading micropolygon vertices. This setting enables the raytrace rendering on a per-object basis."]}, {"type": "para", "indent": 4, "text": ["When micro-polygon rendering, shading normally occurs at micro-polygon vertices at the beginning of the frame. To determine the color of a sample, the corner vertices are interpolated. Turning on ", {"text": ["object:rayshade"], "type": "code"}, " will cause the ray-tracing shading algorithm to be invoked. This will cause each sample to be shaded independently. This means that the shading cost may be significantly increased. However, each sample will be shaded at the correct time, and location."]}, {"type": "para", "indent": 4, "text": ["Currently not supported for per-primitive material assignment (material SOP)."]}], "indent": 0, "text": ["Raytrace shading"], "role": "item", "attrs": {"ifdprop": "object:rayshade", "hprop": "vm_rayshade"}, "type": "parameters_item", "id": "vm_rayshade"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": ["Shading"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "text": ["If enabled, this object\u2019s rendered motion blur will be based upon\n    the vector attribute named ", {"text": ["v"], "type": "code"}, " in the geometry. The units of the\n    attribute are in (1 unit/second)."]}, {"type": "para", "indent": 4, "text": ["Velocity motion blur should be used if it contains changing point\n    counts since it cannot be rendered correctly with deformation\n    motion blur. For example, a particle system with changing particle\n    counts should use this option."]}, {"type": "para", "indent": 4, "text": ["You can use Velocity blur on these types of objects as long as they\n    have valid ", {"text": ["v"], "type": "code"}, " attributes. Particles automatically have the \"v\"\n    attribute so if you are rendering particles, simply enable this\n    parameter."]}], "indent": 0, "text": ["Geometry velocity blur"], "role": "item", "attrs": {"ifdprop": "object:velocityblur", "hprop": "geo_velocityblur"}, "type": "parameters_item", "id": "geo_velocityblur"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": ["Sampling"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "text": ["This parameter controls the geometric subdivision resolution for all rendering engines and additionally controls the shading resolution for micropolygon rendering.  With all other parameters at their defaults, a value of 1 means that approximately 1 micropolygon will be created per pixel.  A higher value will generate smaller micropolygons meaning that more shading will occur - but the quality will be higher."]}, {"type": "para", "indent": 4, "text": ["In ray tracing engines, shading quality only affects the geometric subdivision quality for smooth surfaces (NURBS, render as subdivision) and for displacements - without changing the amount of surface shading.  When using ray tracing, pixel samples and ray sampling parameters must be used to improve surface shading quality."]}, {"type": "para", "indent": 4, "text": ["The effect of changing the shading quality is to increase or decrease the amount of shading by a factor of ", {"text": ["vm_shadingquality"], "type": "code"}, " ", {"text": ["squared"], "type": "strong"}, " - so a shading quality of 2 will perform 4 times as much shading and a shading quality of 0.5 will perform 1/4 times as much shading."]}], "indent": 0, "text": ["Shading quality"], "role": "item", "attrs": {"ifdprop": "object:shadingquality", "hprop": "vm_shadingquality"}, "type": "parameters_item", "id": "vm_shadingquality"}, {"body": [{"type": "para", "indent": 4, "text": ["This property controls the tesselation levels for nearly flat primitives. By increasing the value, more primitives will be considered flat and will be sub-divided less. Turn this option ", {"text": ["down"], "type": "em"}, " for more accurate (less optimized) nearly-flat surfaces."]}], "indent": 0, "text": ["Dicing flatness"], "role": "item", "attrs": {"ifdprop": "object:flatness", "hprop": "vm_flatness"}, "type": "parameters_item", "id": "vm_flatness"}, {"body": [{"type": "para", "indent": 4, "text": ["This property will cause this object to generate all displaced and subdivided geometry before the render begins. Ray tracing can be significantly faster when this setting is enabled at the cost of potentially huge memory requirements."]}, {"body": [{"body": [{"type": "para", "indent": 8, "text": ["Geometry is diced when it is hit by a ray."]}], "type": "dt", "indent": 4, "text": [{"text": ["Disable Predicing"], "type": "code"}]}, {"body": [{"type": "para", "indent": 8, "text": ["Generate and store all diced geometry at once."]}], "type": "dt", "indent": 4, "text": [{"text": ["Full Predicing"], "type": "code"}]}, {"body": [{"type": "para", "indent": 8, "text": ["Generate all diced geometry just to compute accurate bounding boxes.  This setting will discard the diced geometry as soon as the box has been computed, so it is very memory efficient.  This can be useful to improve efficiency when using displacements with a large displacement bound without incurring the memory cost of full predicing."]}], "type": "dt", "indent": 4, "text": [{"text": ["Precompute Bounds"], "type": "code"}]}], "type": "dt_group", "container": true}, {"type": "para", "indent": 4, "text": ["When ray-tracing, if all polygons on the model are visible (either to primary or secondary rays) it can be more efficient to pre-dice all the geometry in that model rather than caching portions of the geometry and re-generating the geometry on the fly. This is especially true when global illumination is being computed (since there is less coherency among rays)."]}, {"type": "para", "indent": 4, "text": ["Currently not supported for per-primitive material assignment (material SOP)."]}], "indent": 0, "text": ["Ray predicing"], "role": "item", "attrs": {"ifdprop": "object:raypredice", "hprop": "vm_raypredice"}, "type": "parameters_item", "id": "vm_raypredice"}, {"body": [{"type": "para", "indent": 4, "text": ["When rendering a curve, turns the curve into a surface and dices the surface, running the surface shader on multiple points across the surface. This may be useful when the curves become curved surfaces, but is less efficient. The default is to simply run the shader on the points of the curve and duplicate those shaded points across the created surface."]}], "indent": 0, "text": ["Shade curves as surfaces"], "role": "item", "attrs": {"ifdprop": "object:curvesurface", "hprop": "vm_curvesurface"}, "type": "parameters_item", "id": "vm_curvesurface"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": ["Dicing"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"type": "para", "indent": 4, "text": ["If enabled, geometry that are facing away from the camera are not\n    rendered."]}], "indent": 0, "text": ["Backface removal (Mantra)"], "role": "item", "attrs": {"ifdprop": "object:rmbackface", "hprop": "vm_rmbackface"}, "type": "parameters_item", "id": "vm_rmbackface"}, {"body": [{"type": "para", "indent": 4, "text": ["Geometry SHOP used by the renderer to generate render geometry for this object."]}], "indent": 0, "text": ["Procedural shader"], "role": "item", "attrs": {"hprop": "shop_geometrypath"}, "type": "parameters_item", "id": "shop_geometrypath"}, {"body": [{"type": "para", "indent": 4, "text": ["Enables output of geometry when a procedural shader is assigned.  If you know that the procedural you have assigned does not rely on geometry being present for the procedural to operate correctly, you can disable this toggle."]}], "indent": 0, "text": ["Force procedural geometry output"], "role": "item", "attrs": {"hprop": "vm_forcegeometry"}, "type": "parameters_item", "id": "vm_forcegeometry"}, {"body": [{"type": "para", "indent": 4, "text": ["Render polygons as a subdivision surface. The ", {"text": ["creaseweight"], "type": "code"}, " attribute is used to perform linear creasing. This attribute may appear on points, vertices or primitives."]}, {"type": "para", "indent": 4, "text": ["When rendering using OpenSubdiv, in addition to the ", {"text": ["creaseweight"], "type": "code"}, ", ", {"text": ["cornerwieght"], "type": "code"}, " attributes and the ", {"text": ["subdivision_hole"], "type": "code"}, " group, additional attributes are scanned to control the behaviour of refinement.  These override any other settings:"]}, {"body": [{"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["int osd_scheme"], "type": "code"}, ", ", {"text": ["string osd_scheme"], "type": "code"}, ":  Specifies the scheme for OSD subdivision (0 or \"catmull-clark\"; 1 or \"loop\";  2 or \"bilinear\").  Note that for Loop subdivision, the geometry can only contain triangles."]}, {"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["int osd_vtxboundaryinterpolation"], "type": "code"}, ": The Vertex Boundary Interpolation method (see ", {"text": ["vm_osd_vtxinterp"], "type": "code"}, " for further details)"]}, {"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["int osd_fvarlinearinterpolation"], "type": "code"}, ": The Face-Varying Linear Interpolation method (see ", {"text": ["vm_osd_fvarinterp"], "type": "code"}, " for further details)"]}, {"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["int osd_creasingmethod"], "type": "code"}, ": Specify the creasing method, 0 for Catmull-Clark, 1 for Chaikin"]}, {"type": "bullet", "blevel": 6, "indent": 4, "text": [{"text": ["int osd_trianglesubdiv"], "type": "code"}, ": Specifies the triangle weighting algorithm, 0 for Catmull-Clark weights, 1 for \"smooth triangle\" weights."]}], "type": "bullet_group", "container": true}], "indent": 0, "text": ["Polygons as subdivision (Mantra)"], "role": "item", "attrs": {"ifdprop": "object:rendersubd", "hprop": "vm_rendersubd"}, "type": "parameters_item", "id": "vm_rendersubd"}, {"body": [{"type": "para", "indent": 4, "text": ["Controls how points from geometry are rendered. At the default settings, ", {"text": ["No Point Rendering"], "type": "ui"}, ", only points from particle systems are rendered. \n    Setting this value to ", {"text": ["Render Only Points"], "type": "ui"}, ", will render the geometry using only the point attributes, ignoring all vertex and primitive information.\n    ", {"text": ["Render Unconnected Points"], "type": "ui"}, " works in a similar way, but only for points not used by any of the geometry\u2019s primitives."]}, {"type": "para", "indent": 4, "text": ["Two attributes control the point primitives if they exist."]}, {"body": [{"body": [{"type": "para", "indent": 8, "text": ["A vector which determines the normal of the point geometry. If the attribute doesn\u2019t exist, points are oriented to face the incoming ray (the VEX ", {"text": ["I"], "type": "code"}, " variable)."]}], "type": "dt", "indent": 4, "text": [{"text": ["orient"], "type": "code"}]}, {"body": [{"type": "para", "indent": 8, "text": ["Determines the 3D size of the points (defaults to 0.05)."]}], "type": "dt", "indent": 4, "text": [{"text": ["width"], "type": "code"}]}], "type": "dt_group", "container": true}], "indent": 0, "text": ["Render as points (Mantra)"], "role": "item", "attrs": {"ifdprop": "object:renderpoints", "hprop": "vm_renderpoints"}, "type": "parameters_item", "id": "vm_renderpoints"}, {"body": [{"type": "para", "indent": 4, "text": ["Mantra will initialize the ", {"text": ["N"], "type": "code"}, " global from the ", {"text": ["N"], "type": "code"}, " attribute when rendering point primitives. When disabled (the default), point normals will be initialized to face the camera."]}], "indent": 0, "text": ["Use N for point rendering"], "role": "item", "attrs": {"ifdprop": "object:usenforpoints", "hprop": "vm_usenforpoints"}, "type": "parameters_item", "id": "vm_usenforpoints"}, {"body": [{"type": "para", "indent": 4, "text": ["Render metaballs as volumes as opposed to surfaces.  The volume quality for metaballs will be set based on the average size of all metaballs in the geometry, so increasing or decreasing the metaball size will automatically adjust the render quality to match."]}], "indent": 0, "text": ["Metaballs as volume"], "role": "item", "attrs": {"ifdprop": "object:metavolume", "hprop": "vm_metavolume"}, "type": "parameters_item", "id": "vm_metavolume"}, {"body": [{"type": "para", "indent": 4, "text": ["Whether Mantra will try to prevent cracks."]}, {"type": "para", "indent": 4, "text": ["Coving is the process of filling cracks in diced geometry\n    at render time, where different levels of dicing side-by-side\n    create gaps at T-junctions."]}, {"type": "para", "indent": 4, "text": ["The default setting, ", {"text": ["Coving for displacement/sub-d"], "type": "ui"}, ", only does\n    coving for surfaces with a displacement shader and subdivision\n    surfaces, where the displacement of points can potentially create\n    large cracks. This is sufficient for more rendering, however\n    you may want to use ", {"text": ["Coving for all primitives"], "type": "ui"}, " if you are\n    using a very low shading rate or see cracks in the alpha of the\n    rendered image."]}, {"type": "para", "indent": 4, "text": ["Do not use ", {"text": ["Disable coving"], "type": "ui"}, ". It has no performance\n    benefit, and may actually harm performance since Houdini has to\n    render any geometry visible through the crack."]}, {"body": [{"body": [{"type": "para", "indent": 8, "text": ["No coving."]}], "type": "dt", "indent": 4, "text": [{"text": ["0"], "type": "code"}]}, {"body": [{"type": "para", "indent": 8, "text": ["Only displaced surfaces and sub-division surfaces will be coved."]}], "type": "dt", "indent": 4, "text": [{"text": ["1"], "type": "code"}]}, {"body": [{"type": "para", "indent": 8, "text": ["All primitives will be coved."]}], "type": "dt", "indent": 4, "text": [{"text": ["2"], "type": "code"}]}], "type": "dt_group", "container": true}], "indent": 0, "text": ["Coving"], "role": "item", "attrs": {"ifdprop": "object:coving", "hprop": "vm_coving"}, "type": "parameters_item", "id": "vm_coving"}, {"body": [{"type": "para", "indent": 4, "text": ["Controls how material overrides are evaluated and output to the IFD. "]}, {"type": "para", "indent": 4, "text": ["When set to ", {"text": ["Evaluate Once"], "type": "ui"}, ", any parameter on the material, that\n    uses channels or expressions, will be evaluated only once\n    for the entire detail. This results in significantly faster IFD \n    generation, due to the material parameter assignment being handled\n    entirely by Mantra, rather than Houdini. \n    Setting the parameter value to ", {"text": ["Evaluate for Each Primitive/Point"], "type": "ui"}, "  \n    will evaluate those parameters for each primitive and/or point. \n    It\u2019s also possible to skip material overrides entirely by setting \n    the parameter value to ", {"text": ["Disabled"], "type": "ui"}, "."]}], "indent": 0, "text": ["Material Override"], "role": "item", "attrs": {"ifdprop": "geometry:materialoverride", "hprop": "vm_materialoverride"}, "type": "parameters_item", "id": "vm_materialoverride"}, {"body": [{"type": "para", "indent": 4, "text": ["Whether mantra should compute the N attribute automatically. If the N attribute exists, the value will remain unchanged. However, if no N attribute exists, it will be created. This allows polygon geometry which doesn\u2019t have the N attribute already computed to be smooth shaded."]}, {"type": "para", "indent": 4, "text": ["Not supported for per-primitive material assignment (material SOP)."]}], "indent": 0, "text": ["Automatically Compute Normals (Old)"], "role": "item", "attrs": {"ifdprop": "geometry:computeN", "hprop": "vm_computeN"}, "type": "parameters_item", "id": "vm_computeN"}, {"body": [{"type": "para", "indent": 4, "text": ["When geometry has shaders defined on a per-primitive basis, this parameter will override these shaders and use only the object\u2019s shader. This is useful when performing matte shading on objects."]}, {"type": "para", "indent": 4, "text": ["Not supported for per-primitive material assignment (material SOP)."]}], "indent": 0, "text": ["Ignore geometry attribute shaders"], "role": "item", "attrs": {"ifdprop": "object:overridedetail", "hprop": "vm_overridedetail"}, "type": "parameters_item", "id": "vm_overridedetail"}], "container": true, "role": "item_group", "type": "parameters_item_group"}], "indent": 0, "level": 3, "text": ["Geometry"], "container": true, "type": "h", "id": null}], "indent": 0, "level": 2, "text": ["Render"], "container": true, "type": "h", "id": "render_tab"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["Any open curves contained in this object will be lit when the viewport is set to do so."]}, {"indent": 4, "type": "para", "text": ["Turning this on will also use a GLSL shader better suited to hair if the ", {"text": ["whitehair"], "type": "code"}, " or ", {"text": ["guardhair"], "type": "code"}, " attributes are found in the geometry. "]}, {"indent": 4, "type": "para", "text": ["Curves with the ", {"text": ["width"], "type": "code"}, " attribute will also be rendered as thick ribbons with varying width in shaded modes."]}], "indent": 0, "type": "dt", "attrs": {"id": "shadeopen"}, "text": ["Shade Open Curves In Viewport"]}, {"body": [{"indent": 4, "type": "para", "text": ["Caches object transforms once Houdini calculates them. This is\n    especially useful for objects whose world space position is\n    expensive to calculate (such as ", {"text": ["Sticky objects"], "fullpath": "/nodes/obj/sticky", "scheme": "Node", "type": "link", "value": "/nodes/obj/sticky"}, "),\n    and objects at the end of long parenting chains (such as\n    ", {"text": ["Bones"], "fullpath": "/nodes/obj/bone", "scheme": "Node", "type": "link", "value": "/nodes/obj/bone"}, "). This option is turned on by default for Sticky and\n    Bone objects."]}, {"indent": 4, "type": "para", "text": ["See the ", {"text": ["OBJ Caching"], "type": "ui"}, " section of the\n    ", {"fragment": "#objcache", "text": ["Houdini Preferences"], "value": "/ref/windows/mainprefs#objcache", "fullpath": "/ref/windows/mainprefs#objcache", "scheme": null, "type": "link"}, " window\n    for how to control the size of the object transform cache."]}], "indent": 0, "type": "dt", "attrs": {"id": "cachedata"}, "text": ["Cache Object Transform"]}, {"body": [{"indent": 4, "type": "para", "text": ["Draw this geometry with multiple skins, at different frames in the future\n    and/or past. The number of skins before and after the current frame, the \n    frame increment between them, their opacity and color tinting can be\n    configured in the \n    ", {"fragment": "#onionskinning", "text": ["3D Display Options"], "value": "/ref/windows/displayopts_3d#onionskinning", "fullpath": "/ref/windows/displayopts_3d#onionskinning", "scheme": null, "type": "link"}, "."]}, {"indent": 4, "type": "para", "text": [{"text": "", "fullpath": "/images/char/onionskinning2.png", "scheme": "Image", "type": "link", "value": "/images/char/onionskinning2.png"}]}, {"body": [{"body": [{"indent": 7, "type": "para", "text": ["Turn off onion skinning."]}], "indent": 4, "type": "dt", "text": ["Off"]}, {"body": [{"indent": 7, "type": "para", "text": ["Only show the effects of the object transform. This will not recook\n       the actual geometry if it is changing over time, making it faster than\n       Deformation."]}], "indent": 4, "type": "dt", "text": ["Transform only"]}, {"body": [{"indent": 7, "type": "para", "text": ["Show the skins with both object transforms and geometry deformation.\n       This will cause cooking of geometry at the SOP level, if animated."]}], "indent": 4, "type": "dt", "text": ["Deformation"]}], "container": true, "type": "dt_group"}], "indent": 0, "type": "dt", "attrs": {"id": "onionskinning"}, "text": ["Onion Skinning"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 2, "text": ["Misc"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["This is typically -1. However, if the object is performing point\n    instancing, then this variable will be set to the point number\n    of the template geometry. For the IPT variable to be active, the\n    Point Instancing parameter must be turned on in this object."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["This variable is deprecated. Use the\n        ", {"text": "", "value": "/expressions/instancepoint", "fallback_text": "instancepoint()", "fullpath": "/expressions/instancepoint", "scheme": "Exp", "type": "link"}, " expression function instead."]}], "indent": 4, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "type": "dt", "attrs": {"id": "ipt"}, "text": ["IPT"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 2, "text": ["Locals"], "container": true, "type": "h", "id": null}], "included": ["/props/_minmax_styles", "/props/mantra"], "type": "root", "attrs": {"type": "include"}}