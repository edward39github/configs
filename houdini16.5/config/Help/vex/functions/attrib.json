{"body": [{"indent": 0, "text": ["attrib"], "type": "title", "level": 0}, {"indent": 0, "type": "summary", "text": ["Reads the value of an attribute from geometry."]}, {"body": [{"indent": 0, "role": "item", "type": "usage", "text": [" ", {"text": ["<type> attrib(<geometry>, string attribclass, string name, int elemnum)"], "type": "code"}]}, {"body": [{"indent": 4, "type": "para", "text": ["This general form lets you specify the attribute \"class\" at run-time. This can be useful for writing general code that can work on different classes.\n    If you know the class of attribute you want to read ahead of time, using ", {"text": "", "value": "/vex/functions/detail", "fallback_text": "detail()", "fullpath": "/vex/functions/detail", "scheme": "Vex", "type": "link"}, ", ", {"text": "", "value": "/vex/functions/prim", "fallback_text": "prim()", "fullpath": "/vex/functions/prim", "scheme": "Vex", "type": "link"}, ", ", {"text": "", "value": "/vex/functions/point", "fallback_text": "point()", "fullpath": "/vex/functions/point", "scheme": "Vex", "type": "link"}, ", or ", {"text": "", "value": "/vex/functions/vertex", "fallback_text": "vertex()", "fullpath": "/vex/functions/vertex", "scheme": "Vex", "type": "link"}, " may be faster."]}], "indent": 0, "role": "item", "type": "usage", "text": [" ", {"text": ["<type>[] attrib(<geometry>, string attribclass, string name, int elemnum)"], "type": "code"}]}], "container": true, "role": "item_group", "type": "usage_group"}, {"body": [{"body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."]}, {"type": "para", "indent": 4, "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"text": [".bgeo"], "type": "code"}, ") to read from. When running inside Houdini, this can be an ", {"text": ["op:/path/to/sop"], "type": "code"}, " reference."]}], "indent": 0, "text": [{"text": ["<geometry>"], "type": "code"}], "role": "item", "attrs": {"id": "geometry"}, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "text": ["One of ", {"text": ["\"detail\""], "type": "code"}, " (or ", {"text": ["\"global\""], "type": "code"}, "), ", {"text": ["\"point\""], "type": "code"}, ", ", {"text": ["\"prim\""], "type": "code"}, ", or ", {"text": ["\"vertex\""], "type": "code"}, "."]}, {"indent": 4, "type": "para", "text": ["You can also use ", {"text": ["\"primgroup\""], "type": "code"}, ", ", {"text": ["\"pointgroup\""], "type": "code"}, " or ", {"text": ["\"vertexgroup\""], "type": "code"}, " to ", {"text": ["read from groups"], "fullpath": "/vex/groups", "scheme": null, "type": "link", "value": "/vex/groups"}, "."]}], "indent": 0, "text": {"text": {"text": ["attribclass"], "type": "code"}, "type": "code"}, "role": "item", "attrs": {"id": "attribclass"}, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "text": ["The name of the attribute, group, or intrinsic to read from."]}], "indent": 0, "role": "item", "type": "arg", "text": {"text": ["name"], "type": "code"}}, {"body": [{"indent": 4, "type": "para", "text": ["Which element (e.g. point number, primitive number, vertex number) to read from. Ignored for detail attributes.  You can use ", {"text": "", "value": "/vex/functions/vertexindex", "fallback_text": "vertexindex()", "fullpath": "/vex/functions/vertexindex", "scheme": "Vex", "type": "link"}, " to convert a primitive/point pair into a vertex number."]}], "indent": 0, "role": "item", "type": "arg", "text": {"text": ["elemnum"], "type": "code"}}, {"body": [{"indent": 4, "type": "para", "text": ["Zero/empty value if the attribute does not exist. Use ", {"text": "", "value": "/vex/functions/getattrib", "fallback_text": "getattrib()", "fullpath": "/vex/functions/getattrib", "scheme": "Vex", "type": "link"}, " if you want to check whether the attribute existed."]}], "indent": 0, "returns": true, "role": "item", "type": "arg"}], "container": true, "role": "item_group", "type": "arg_group"}], "title": ["attrib"], "summary": ["Reads the value of an attribute from geometry."], "attrs": {"redirect": "../attrib_suite#attrib", "group": "attrib", "tags": "attrib", "showtags": "true", "context": "all", "type": "vex"}, "included": ["/vex/functions/_common"], "type": "root"}