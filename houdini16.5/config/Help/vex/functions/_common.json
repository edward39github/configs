{"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."]}, {"indent": 4, "type": "para", "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"text": [".bgeo"], "type": "code"}, ") to read from. When running inside Houdini, this can be an ", {"text": ["op:/path/to/sop"], "type": "code"}, " reference."]}], "indent": 0, "text": [{"text": ["<geometry>"], "type": "code"}], "role": "item", "attrs": {"id": "geometry"}, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "text": ["The input number to read from, starting from 0. For example, the first input is 0, the second input is 1, and so on."]}], "indent": 0, "text": {"text": ["opinput"], "type": "code"}, "role": "item", "attrs": {"id": "opinput_arg"}, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "text": ["The input number to read from, starting from 0. For example, the first input is 0, the second input is 1, and so on."]}, {"indent": 4, "type": "para", "text": ["If you specify ", {"text": ["-1"], "type": "code"}, ", the function uses the current CHOP node or input ", {"text": ["0"], "type": "code"}, " if it is connected."]}], "indent": 0, "text": {"text": ["opinput"], "type": "code"}, "role": "item", "attrs": {"id": "chop_opinput_arg"}, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "text": ["A string specifying a geometry file (for example, a ", {"text": [".bgeo"], "type": "code"}, ") to read from. When running inside Houdini, this can be an ", {"text": ["op:/path/to/sop"], "type": "code"}, " reference."]}], "indent": 0, "text": {"text": ["geometry"], "type": "code"}, "role": "item", "attrs": {"id": "geometry_output"}, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "text": ["A handle to the geometry to write to. Currently the only valid value is ", {"text": ["0"], "type": "code"}, " or ", {"text": "", "value": "/vex/functions/geoself", "fallback_text": "geoself()", "fullpath": "/vex/functions/geoself", "scheme": "Vex", "type": "link"}, ", which means the current geometry in a node. (This argument may be used in the future to allow writing to other geometries.)"]}], "indent": 0, "text": {"text": ["geohandle"], "type": "code"}, "role": "item", "attrs": {"id": "geohandle_arg"}, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "text": ["One of ", {"text": ["\"detail\""], "type": "code"}, " (or ", {"text": ["\"global\""], "type": "code"}, "), ", {"text": ["\"point\""], "type": "code"}, ", ", {"text": ["\"prim\""], "type": "code"}, ", or ", {"text": ["\"vertex\""], "type": "code"}, "."]}, {"indent": 4, "type": "para", "text": ["You can also use ", {"text": ["\"primgroup\""], "type": "code"}, ", ", {"text": ["\"pointgroup\""], "type": "code"}, " or ", {"text": ["\"vertexgroup\""], "type": "code"}, " to ", {"text": ["read from groups"], "fullpath": "/vex/groups", "scheme": null, "type": "link", "value": "/vex/groups"}, "."]}], "indent": 0, "text": {"text": ["attribclass"], "type": "code"}, "role": "item", "attrs": {"id": "attribclass"}, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "text": ["The name of the attribute (or intrinsic) to read."]}], "indent": 0, "text": {"text": ["attribute_name"], "type": "code"}, "role": "item", "attrs": {"id": "attribname"}, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "text": ["The point/primitive/vertex number to read the attribute value from. For detail attributes, use ", {"text": ["0"], "type": "code"}, " here (the argument is ignored for detail attributes)."]}, {"indent": 4, "type": "para", "text": ["To get the linear vertex number given a primitive number and the vertex number on the primitive, use the ", {"text": "", "value": "/vex/functions/primvertex", "fallback_text": "primvertex()", "fullpath": "/vex/functions/primvertex", "scheme": "Vex", "type": "link"}, " function."]}], "indent": 0, "text": {"text": ["elemnum"], "type": "code"}, "role": "item", "attrs": {"id": "elemnum"}, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "text": ["The name of the intrinsic to read. For example, ", {"text": ["\"pointattributes\""], "type": "code"}, ", ", {"text": ["\"pointcount\""], "type": "code"}, ", or ", {"text": ["\"bounds\""], "type": "code"}, "."]}], "indent": 0, "text": {"text": ["intrinsic_name"], "type": "code"}, "role": "item", "attrs": {"id": "intrinsicname"}, "type": "arg"}], "container": true, "role": "item_group", "type": "arg_group"}, {"body": [{"body": [{"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"none\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Don\u2019t transform."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"point\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Apply scales, rotations, and transformations."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"hpoint\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Apply scales, rotations, and transformations to this vector4."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"vector\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Apply scales and rotations, but not transformations."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"normal\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Apply rotations, apply scales with inverse-transpose."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"color\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Don\u2019t transform."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"matrix\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Apply scales, rotations, and transformations to this matrix."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"quaternion\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Apply rotations."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"indexpair\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Don\u2019t transform."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"integer\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Do not blend this value when points are averaged."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"integer-blend\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Integer values that blend when points are averaged."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"texturecoord\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Don\u2019t transform, and try to preserve seams when interpolating.\n        Attributes with this type will show up in the UV viewport menu."]}], "role": "td", "type": "cell"}], "type": "row"}], "type": "table", "thead": []}], "indent": 0, "role": "item", "type": "null", "attrs": {"id": "attrib_typeinfo_values"}}, {"body": [{"indent": 4, "type": "para", "text": ["Returns the value of ", {"text": ["geohandle"], "type": "code"}, " on success or ", {"text": ["-1"], "type": "code"}, " on failure."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["If the attribute does not exist, this function ", {"text": ["creates the attribute"], "type": "strong"}, " with a default value of zero, empty string, or an empty array.\n        If you want to control the default value of a numeric attribute, use ", {"text": "", "value": "/vex/functions/addattrib", "fallback_text": "addattrib()", "fullpath": "/vex/functions/addattrib", "scheme": "Vex", "type": "link"}, " before setting the attribute."]}], "indent": 4, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "role": "item", "type": "null", "attrs": {"id": "set_attrib_info"}}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["(Optional) if given, this controls how the function modifies any existing value in the attribute."]}, {"body": [{"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"set\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Overwrite the attribute with the given value."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"add\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Add to the attribute the value."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"min\""], "type": "code"}, ", ", {"text": ["\"minimum\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Set the attribute to the minimum of itself and the value."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"max\""], "type": "code"}, ", ", {"text": ["\"maximum\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Set the attribute to the maximum of itself and the value."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"mult\""], "type": "code"}, ", ", {"text": ["\"multiply\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Multiply the attribute by the value.  For matrices, this will do matrix multiplication.  For vectors, component-wise."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"toggle\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Toggles the attribute, independent of the source value.  Useful for toggling group membership."]}], "role": "td", "type": "cell"}], "type": "row"}, {"body": [{"indent": 4, "role": "td", "type": "cell", "text": [{"text": ["\"append\""], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["Valid for string and array attributes.  Appends the source value to the end of the original value."]}], "role": "td", "type": "cell"}], "type": "row"}], "type": "table", "thead": []}], "indent": 0, "text": {"text": ["mode"], "type": "code"}, "role": "item", "attrs": {"id": "set_attrib_mode"}, "type": "arg"}, {"body": [{"indent": 4, "type": "para", "text": ["The linear index of a vertex.\n    If you have a point number and point vertex number, you can use ", {"text": "", "value": "/vex/functions/vertexindex", "fallback_text": "vertexindex()", "fullpath": "/vex/functions/vertexindex", "scheme": "Vex", "type": "link"}, " to convert them to a linear index."]}], "indent": 0, "text": {"text": ["linearvertex"], "type": "code"}, "role": "item", "attrs": {"id": "linearvertex"}, "type": "arg"}], "container": true, "role": "item_group", "type": "arg_group"}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": "", "fullpath": "/vex/random", "scheme": null, "type": "link", "value": "/vex/random"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/anoise", "fallback_text": "anoise()", "fullpath": "/vex/functions/anoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/curlnoise", "fallback_text": "curlnoise()", "fullpath": "/vex/functions/curlnoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/flownoise", "fallback_text": "flownoise()", "fullpath": "/vex/functions/flownoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/noise", "fallback_text": "noise()", "fullpath": "/vex/functions/noise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/onoise", "fallback_text": "onoise()", "fullpath": "/vex/functions/onoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/pnoise", "fallback_text": "pnoise()", "fullpath": "/vex/functions/pnoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/snoise", "fallback_text": "snoise()", "fullpath": "/vex/functions/snoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/vnoise", "fallback_text": "vnoise()", "fullpath": "/vex/functions/vnoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/wnoise", "fallback_text": "wnoise()", "fullpath": "/vex/functions/wnoise", "scheme": "Vex", "type": "link"}]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": "", "value": "/vex/functions/xnoise", "fallback_text": "xnoise()", "fullpath": "/vex/functions/xnoise", "scheme": "Vex", "type": "link"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "role": "item", "type": "null", "attrs": {"id": "noiselinks"}}], "type": "root", "attrs": {"type": "include"}}